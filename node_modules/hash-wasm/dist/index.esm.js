/*!
 * hash-wasm (https://www.npmjs.com/package/hash-wasm)
 * (c) Dani Biro
 * @license MIT
 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/* eslint-disable import/prefer-default-export */
/* eslint-disable no-bitwise */
var _a;
function getGlobal() {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    // eslint-disable-next-line no-restricted-globals
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    return global;
}
const globalObject = getGlobal();
const nodeBuffer = (_a = globalObject.Buffer) !== null && _a !== void 0 ? _a : null;
const textEncoder = globalObject.TextEncoder ? new globalObject.TextEncoder() : null;
function intArrayToString(arr, len) {
    return String.fromCharCode(...arr.subarray(0, len));
}
function hexCharCodesToInt(a, b) {
    return (((a & 0xF) + ((a >> 6) | ((a >> 3) & 0x8))) << 4) | ((b & 0xF) + ((b >> 6) | ((b >> 3) & 0x8)));
}
function writeHexToUInt8(buf, str) {
    const size = str.length >> 1;
    for (let i = 0; i < size; i++) {
        const index = i << 1;
        buf[i] = hexCharCodesToInt(str.charCodeAt(index), str.charCodeAt(index + 1));
    }
}
const alpha = 'a'.charCodeAt(0) - 10;
const digit = '0'.charCodeAt(0);
function getDigestHex(tmpBuffer, input, hashLength) {
    let p = 0;
    /* eslint-disable no-plusplus */
    for (let i = 0; i < hashLength; i++) {
        let nibble = input[i] >>> 4;
        tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;
        nibble = input[i] & 0xF;
        tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;
    }
    /* eslint-enable no-plusplus */
    return String.fromCharCode.apply(null, tmpBuffer);
}
const getUInt8Buffer = nodeBuffer !== null
    ? (data) => {
        if (typeof data === 'string') {
            const buf = nodeBuffer.from(data, 'utf8');
            return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);
        }
        if (nodeBuffer.isBuffer(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.length);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
        }
        throw new Error('Invalid data type!');
    }
    : (data) => {
        if (typeof data === 'string') {
            return textEncoder.encode(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
        }
        throw new Error('Invalid data type!');
    };
const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
const base64Lookup = new Uint8Array(256);
for (let i = 0; i < base64Chars.length; i++) {
    base64Lookup[base64Chars.charCodeAt(i)] = i;
}
function encodeBase64(data, pad = true) {
    const len = data.length;
    const extraBytes = len % 3;
    const parts = [];
    const len2 = len - extraBytes;
    for (let i = 0; i < len2; i += 3) {
        const tmp = ((data[i] << 16) & 0xFF0000)
            + ((data[i + 1] << 8) & 0xFF00)
            + (data[i + 2] & 0xFF);
        const triplet = base64Chars.charAt((tmp >> 18) & 0x3F)
            + base64Chars.charAt((tmp >> 12) & 0x3F)
            + base64Chars.charAt((tmp >> 6) & 0x3F)
            + base64Chars.charAt(tmp & 0x3F);
        parts.push(triplet);
    }
    if (extraBytes === 1) {
        const tmp = data[len - 1];
        const a = base64Chars.charAt(tmp >> 2);
        const b = base64Chars.charAt((tmp << 4) & 0x3F);
        parts.push(`${a}${b}`);
        if (pad) {
            parts.push('==');
        }
    }
    else if (extraBytes === 2) {
        const tmp = (data[len - 2] << 8) + data[len - 1];
        const a = base64Chars.charAt(tmp >> 10);
        const b = base64Chars.charAt((tmp >> 4) & 0x3F);
        const c = base64Chars.charAt((tmp << 2) & 0x3F);
        parts.push(`${a}${b}${c}`);
        if (pad) {
            parts.push('=');
        }
    }
    return parts.join('');
}
function getDecodeBase64Length(data) {
    let bufferLength = Math.floor(data.length * 0.75);
    const len = data.length;
    if (data[len - 1] === '=') {
        bufferLength -= 1;
        if (data[len - 2] === '=') {
            bufferLength -= 1;
        }
    }
    return bufferLength;
}
function decodeBase64(data) {
    const bufferLength = getDecodeBase64Length(data);
    const len = data.length;
    const bytes = new Uint8Array(bufferLength);
    let p = 0;
    for (let i = 0; i < len; i += 4) {
        const encoded1 = base64Lookup[data.charCodeAt(i)];
        const encoded2 = base64Lookup[data.charCodeAt(i + 1)];
        const encoded3 = base64Lookup[data.charCodeAt(i + 2)];
        const encoded4 = base64Lookup[data.charCodeAt(i + 3)];
        bytes[p] = (encoded1 << 2) | (encoded2 >> 4);
        p += 1;
        bytes[p] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
        p += 1;
        bytes[p] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        p += 1;
    }
    return bytes;
}

class Mutex {
    constructor() {
        this.mutex = Promise.resolve();
    }
    lock() {
        let begin = () => { };
        this.mutex = this.mutex.then(() => new Promise(begin));
        return new Promise((res) => {
            begin = res;
        });
    }
    dispatch(fn) {
        return __awaiter(this, void 0, void 0, function* () {
            const unlock = yield this.lock();
            try {
                return yield Promise.resolve(fn());
            }
            finally {
                unlock();
            }
        });
    }
}

const MAX_HEAP = 16 * 1024;
const wasmMutex = new Mutex();
const wasmModuleCache = new Map();
function WASMInterface(binary, hashLength) {
    return __awaiter(this, void 0, void 0, function* () {
        let wasmInstance = null;
        let memoryView = null;
        let initialized = false;
        if (typeof WebAssembly === 'undefined') {
            throw new Error('WebAssembly is not supported in this environment!');
        }
        const writeMemory = (data, offset = 0) => {
            memoryView.set(data, offset);
        };
        const getMemory = () => memoryView;
        const getExports = () => wasmInstance.exports;
        const setMemorySize = (totalSize) => {
            wasmInstance.exports.Hash_SetMemorySize(totalSize);
            const arrayOffset = wasmInstance.exports.Hash_GetBuffer();
            const memoryBuffer = wasmInstance.exports.memory.buffer;
            memoryView = new Uint8Array(memoryBuffer, arrayOffset, totalSize);
        };
        const loadWASMPromise = wasmMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {
            if (!wasmModuleCache.has(binary.name)) {
                const asm = decodeBase64(binary.data);
                const promise = WebAssembly.compile(asm);
                wasmModuleCache.set(binary.name, promise);
            }
            const module = yield wasmModuleCache.get(binary.name);
            wasmInstance = yield WebAssembly.instantiate(module, {
            // env: {
            //   emscripten_memcpy_big: (dest, src, num) => {
            //     const memoryBuffer = wasmInstance.exports.memory.buffer;
            //     const memView = new Uint8Array(memoryBuffer, 0);
            //     memView.set(memView.subarray(src, src + num), dest);
            //   },
            //   print_memory: (offset, len) => {
            //     const memoryBuffer = wasmInstance.exports.memory.buffer;
            //     const memView = new Uint8Array(memoryBuffer, 0);
            //     console.log('print_int32', memView.subarray(offset, offset + len));
            //   },
            // },
            });
            // wasmInstance.exports._start();
        }));
        const setupInterface = () => __awaiter(this, void 0, void 0, function* () {
            if (!wasmInstance) {
                yield loadWASMPromise;
            }
            const arrayOffset = wasmInstance.exports.Hash_GetBuffer();
            const memoryBuffer = wasmInstance.exports.memory.buffer;
            memoryView = new Uint8Array(memoryBuffer, arrayOffset, MAX_HEAP);
        });
        const init = (bits = null) => {
            initialized = true;
            wasmInstance.exports.Hash_Init(bits);
        };
        const updateUInt8Array = (data) => {
            let read = 0;
            while (read < data.length) {
                const chunk = data.subarray(read, read + MAX_HEAP);
                read += chunk.length;
                memoryView.set(chunk);
                wasmInstance.exports.Hash_Update(chunk.length);
            }
        };
        const update = (data) => {
            if (!initialized) {
                throw new Error('update() called before init()');
            }
            const Uint8Buffer = getUInt8Buffer(data);
            updateUInt8Array(Uint8Buffer);
        };
        const digestChars = new Uint8Array(hashLength * 2);
        const digest = (outputType, padding = null) => {
            if (!initialized) {
                throw new Error('digest() called before init()');
            }
            initialized = false;
            wasmInstance.exports.Hash_Final(padding);
            if (outputType === 'binary') {
                // the data is copied to allow GC of the original memory object
                return memoryView.slice(0, hashLength);
            }
            return getDigestHex(digestChars, memoryView, hashLength);
        };
        const isDataShort = (data) => {
            if (typeof data === 'string') {
                // worst case is 4 bytes / char
                return data.length < MAX_HEAP / 4;
            }
            return data.byteLength < MAX_HEAP;
        };
        let canSimplify = isDataShort;
        switch (binary.name) {
            case 'argon2':
            case 'scrypt':
                canSimplify = () => true;
                break;
            case 'blake2b':
            case 'blake2s':
                // if there is a key at blake2 then cannot simplify
                canSimplify = (data, initParam) => initParam <= 512 && isDataShort(data);
                break;
            case 'blake3':
                // if there is a key at blake3 then cannot simplify
                canSimplify = (data, initParam) => initParam === 0 && isDataShort(data);
                break;
            case 'xxhash64': // cannot simplify
                canSimplify = () => false;
                break;
        }
        // shorthand for (init + update + digest) for better performance
        const calculate = (data, initParam = null, digestParam = null) => {
            if (!canSimplify(data, initParam)) {
                init(initParam);
                update(data);
                return digest('hex', digestParam);
            }
            const buffer = getUInt8Buffer(data);
            memoryView.set(buffer);
            wasmInstance.exports.Hash_Calculate(buffer.length, initParam, digestParam);
            return getDigestHex(digestChars, memoryView, hashLength);
        };
        yield setupInterface();
        return {
            getMemory,
            writeMemory,
            getExports,
            setMemorySize,
            init,
            update,
            digest,
            calculate,
            hashLength,
        };
    });
}

var name$h = "blake2b";
var data$h = "";
var wasmJson$h = {
	name: name$h,
	data: data$h
};

function lockedCreate(mutex, binary, hashLength) {
    return __awaiter(this, void 0, void 0, function* () {
        const unlock = yield mutex.lock();
        const wasm = yield WASMInterface(binary, hashLength);
        unlock();
        return wasm;
    });
}

const mutex$h = new Mutex();
let wasmCache$h = null;
function validateBits$4(bits) {
    if (!Number.isInteger(bits) || bits < 8 || bits > 512 || bits % 8 !== 0) {
        return new Error('Invalid variant! Valid values: 8, 16, ..., 512');
    }
    return null;
}
function getInitParam$1(outputBits, keyBits) {
    // eslint-disable-next-line no-bitwise
    return outputBits | (keyBits << 16);
}
/**
 * Calculates BLAKE2b hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param bits Number of output bits, which has to be a number
 *             divisible by 8, between 8 and 512. Defaults to 512.
 * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.
 * @returns Computed hash as a hexadecimal string
 */
function blake2b(data, bits = 512, key = null) {
    if (validateBits$4(bits)) {
        return Promise.reject(validateBits$4(bits));
    }
    let keyBuffer = null;
    let initParam = bits;
    if (key !== null) {
        keyBuffer = getUInt8Buffer(key);
        if (keyBuffer.length > 64) {
            return Promise.reject(new Error('Max key length is 64 bytes'));
        }
        initParam = getInitParam$1(bits, keyBuffer.length);
    }
    const hashLength = bits / 8;
    if (wasmCache$h === null || wasmCache$h.hashLength !== hashLength) {
        return lockedCreate(mutex$h, wasmJson$h, hashLength)
            .then((wasm) => {
            wasmCache$h = wasm;
            if (initParam > 512) {
                wasmCache$h.writeMemory(keyBuffer);
            }
            return wasmCache$h.calculate(data, initParam);
        });
    }
    try {
        if (initParam > 512) {
            wasmCache$h.writeMemory(keyBuffer);
        }
        const hash = wasmCache$h.calculate(data, initParam);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new BLAKE2b hash instance
 * @param bits Number of output bits, which has to be a number
 *             divisible by 8, between 8 and 512. Defaults to 512.
 * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.
 */
function createBLAKE2b(bits = 512, key = null) {
    if (validateBits$4(bits)) {
        return Promise.reject(validateBits$4(bits));
    }
    let keyBuffer = null;
    let initParam = bits;
    if (key !== null) {
        keyBuffer = getUInt8Buffer(key);
        if (keyBuffer.length > 64) {
            return Promise.reject(new Error('Max key length is 64 bytes'));
        }
        initParam = getInitParam$1(bits, keyBuffer.length);
    }
    const outputSize = bits / 8;
    return WASMInterface(wasmJson$h, outputSize).then((wasm) => {
        if (initParam > 512) {
            wasm.writeMemory(keyBuffer);
        }
        wasm.init(initParam);
        const obj = {
            init: initParam > 512
                ? () => {
                    wasm.writeMemory(keyBuffer);
                    wasm.init(initParam);
                    return obj;
                }
                : () => {
                    wasm.init(initParam);
                    return obj;
                },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 128,
            digestSize: outputSize,
        };
        return obj;
    });
}

var name$g = "argon2";
var data$g = "";
var wasmJson$g = {
	name: name$g,
	data: data$g
};

function encodeResult(salt, options, res) {
    const parameters = [
        `m=${options.memorySize}`,
        `t=${options.iterations}`,
        `p=${options.parallelism}`,
    ].join(',');
    return `$argon2${options.hashType}$v=19$${parameters}$${encodeBase64(salt, false)}$${encodeBase64(res, false)}`;
}
const uint32View = new DataView(new ArrayBuffer(4));
function int32LE(x) {
    uint32View.setInt32(0, x, true);
    return new Uint8Array(uint32View.buffer);
}
function hashFunc(blake512, buf, len) {
    return __awaiter(this, void 0, void 0, function* () {
        if (len <= 64) {
            const blake = yield createBLAKE2b(len * 8);
            blake.update(int32LE(len));
            blake.update(buf);
            return blake.digest('binary');
        }
        const r = Math.ceil(len / 32) - 2;
        const ret = new Uint8Array(len);
        blake512.init();
        blake512.update(int32LE(len));
        blake512.update(buf);
        let vp = blake512.digest('binary');
        ret.set(vp.subarray(0, 32), 0);
        for (let i = 1; i < r; i++) {
            blake512.init();
            blake512.update(vp);
            vp = blake512.digest('binary');
            ret.set(vp.subarray(0, 32), i * 32);
        }
        const partialBytesNeeded = len - 32 * r;
        let blakeSmall;
        if (partialBytesNeeded === 64) {
            blakeSmall = blake512;
            blakeSmall.init();
        }
        else {
            blakeSmall = yield createBLAKE2b(partialBytesNeeded * 8);
        }
        blakeSmall.update(vp);
        vp = blakeSmall.digest('binary');
        ret.set(vp.subarray(0, partialBytesNeeded), r * 32);
        return ret;
    });
}
function getHashType(type) {
    switch (type) {
        case 'd':
            return 0;
        case 'i':
            return 1;
        default:
            return 2;
    }
}
function argon2Internal(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { parallelism, iterations, hashLength } = options;
        const password = getUInt8Buffer(options.password);
        const salt = getUInt8Buffer(options.salt);
        const version = 0x13;
        const hashType = getHashType(options.hashType);
        const { memorySize } = options; // in KB
        const [argon2Interface, blake512] = yield Promise.all([
            WASMInterface(wasmJson$g, 1024),
            createBLAKE2b(512),
        ]);
        // last block is for storing the init vector
        argon2Interface.setMemorySize(memorySize * 1024 + 1024);
        const initVector = new Uint8Array(24);
        const initVectorView = new DataView(initVector.buffer);
        initVectorView.setInt32(0, parallelism, true);
        initVectorView.setInt32(4, hashLength, true);
        initVectorView.setInt32(8, memorySize, true);
        initVectorView.setInt32(12, iterations, true);
        initVectorView.setInt32(16, version, true);
        initVectorView.setInt32(20, hashType, true);
        argon2Interface.writeMemory(initVector, memorySize * 1024);
        blake512.init();
        blake512.update(initVector);
        blake512.update(int32LE(password.length));
        blake512.update(password);
        blake512.update(int32LE(salt.length));
        blake512.update(salt);
        blake512.update(int32LE(0)); // key length + key
        blake512.update(int32LE(0)); // associatedData length + associatedData
        const segments = Math.floor(memorySize / (parallelism * 4)); // length of each lane
        const lanes = segments * 4;
        const param = new Uint8Array(72);
        const H0 = blake512.digest('binary');
        param.set(H0);
        for (let lane = 0; lane < parallelism; lane++) {
            param.set(int32LE(0), 64);
            param.set(int32LE(lane), 68);
            let position = lane * lanes;
            let chunk = yield hashFunc(blake512, param, 1024);
            argon2Interface.writeMemory(chunk, position * 1024);
            position += 1;
            param.set(int32LE(1), 64);
            chunk = yield hashFunc(blake512, param, 1024);
            argon2Interface.writeMemory(chunk, position * 1024);
        }
        const C = new Uint8Array(1024);
        writeHexToUInt8(C, argon2Interface.calculate(new Uint8Array([]), memorySize));
        const res = yield hashFunc(blake512, C, hashLength);
        if (options.outputType === 'hex') {
            const digestChars = new Uint8Array(hashLength * 2);
            return getDigestHex(digestChars, res, hashLength);
        }
        if (options.outputType === 'encoded') {
            return encodeResult(salt, options, res);
        }
        // return binary format
        return res;
    });
}
const validateOptions$3 = (options) => {
    if (!options || typeof options !== 'object') {
        throw new Error('Invalid options parameter. It requires an object.');
    }
    if (!options.password) {
        throw new Error('Password must be specified');
    }
    options.password = getUInt8Buffer(options.password);
    if (options.password.length < 1) {
        throw new Error('Password must be specified');
    }
    if (!options.salt) {
        throw new Error('Salt must be specified');
    }
    options.salt = getUInt8Buffer(options.salt);
    if (options.salt.length < 8) {
        throw new Error('Salt should be at least 8 bytes long');
    }
    if (!Number.isInteger(options.iterations) || options.iterations < 1) {
        throw new Error('Iterations should be a positive number');
    }
    if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {
        throw new Error('Parallelism should be a positive number');
    }
    if (!Number.isInteger(options.hashLength) || options.hashLength < 4) {
        throw new Error('Hash length should be at least 4 bytes.');
    }
    if (!Number.isInteger(options.memorySize)) {
        throw new Error('Memory size should be specified.');
    }
    if (options.memorySize < 8 * options.parallelism) {
        throw new Error('Memory size should be at least 8 * parallelism.');
    }
    if (options.outputType === undefined) {
        options.outputType = 'hex';
    }
    if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {
        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);
    }
};
/**
 * Calculates hash using the argon2i password-hashing function
 * @returns Computed hash
 */
function argon2i(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateOptions$3(options);
        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'i' }));
    });
}
/**
 * Calculates hash using the argon2id password-hashing function
 * @returns Computed hash
 */
function argon2id(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateOptions$3(options);
        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'id' }));
    });
}
/**
 * Calculates hash using the argon2d password-hashing function
 * @returns Computed hash
 */
function argon2d(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateOptions$3(options);
        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'd' }));
    });
}
const getHashParameters = (password, encoded) => {
    const regex = /^\$argon2(id|i|d)\$v=([0-9]+)\$((?:[mtp]=[0-9]+,){2}[mtp]=[0-9]+)\$([A-Za-z0-9+/]+)\$([A-Za-z0-9+/]+)$/;
    const match = encoded.match(regex);
    if (!match) {
        throw new Error('Invalid hash');
    }
    const [, hashType, version, parameters, salt, hash] = match;
    if (version !== '19') {
        throw new Error(`Unsupported version: ${version}`);
    }
    const parsedParameters = {};
    const paramMap = { m: 'memorySize', p: 'parallelism', t: 'iterations' };
    parameters.split(',').forEach((x) => {
        const [n, v] = x.split('=');
        parsedParameters[paramMap[n]] = parseInt(v, 10);
    });
    return Object.assign(Object.assign({}, parsedParameters), { password, hashType: hashType, salt: decodeBase64(salt), hashLength: getDecodeBase64Length(hash), outputType: 'encoded' });
};
const validateVerifyOptions$1 = (options) => {
    if (!options || typeof options !== 'object') {
        throw new Error('Invalid options parameter. It requires an object.');
    }
    if (options.hash === undefined || typeof options.hash !== 'string') {
        throw new Error('Hash should be specified');
    }
};
/**
 * Verifies password using the argon2 password-hashing function
 * @returns True if the encoded hash matches the password
 */
function argon2Verify(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateVerifyOptions$1(options);
        const params = getHashParameters(options.password, options.hash);
        validateOptions$3(params);
        const hashStart = options.hash.lastIndexOf('$') + 1;
        const result = yield argon2Internal(params);
        return result.substring(hashStart) === options.hash.substring(hashStart);
    });
}

var name$f = "blake2s";
var data$f = "";
var wasmJson$f = {
	name: name$f,
	data: data$f
};

const mutex$g = new Mutex();
let wasmCache$g = null;
function validateBits$3(bits) {
    if (!Number.isInteger(bits) || bits < 8 || bits > 256 || bits % 8 !== 0) {
        return new Error('Invalid variant! Valid values: 8, 16, ..., 256');
    }
    return null;
}
function getInitParam(outputBits, keyBits) {
    // eslint-disable-next-line no-bitwise
    return outputBits | (keyBits << 16);
}
/**
 * Calculates BLAKE2s hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param bits Number of output bits, which has to be a number
 *             divisible by 8, between 8 and 256. Defaults to 256.
 * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.
 * @returns Computed hash as a hexadecimal string
 */
function blake2s(data, bits = 256, key = null) {
    if (validateBits$3(bits)) {
        return Promise.reject(validateBits$3(bits));
    }
    let keyBuffer = null;
    let initParam = bits;
    if (key !== null) {
        keyBuffer = getUInt8Buffer(key);
        if (keyBuffer.length > 32) {
            return Promise.reject(new Error('Max key length is 32 bytes'));
        }
        initParam = getInitParam(bits, keyBuffer.length);
    }
    const hashLength = bits / 8;
    if (wasmCache$g === null || wasmCache$g.hashLength !== hashLength) {
        return lockedCreate(mutex$g, wasmJson$f, hashLength)
            .then((wasm) => {
            wasmCache$g = wasm;
            if (initParam > 512) {
                wasmCache$g.writeMemory(keyBuffer);
            }
            return wasmCache$g.calculate(data, initParam);
        });
    }
    try {
        if (initParam > 512) {
            wasmCache$g.writeMemory(keyBuffer);
        }
        const hash = wasmCache$g.calculate(data, initParam);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new BLAKE2s hash instance
 * @param bits Number of output bits, which has to be a number
 *             divisible by 8, between 8 and 256. Defaults to 256.
 * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.
 */
function createBLAKE2s(bits = 256, key = null) {
    if (validateBits$3(bits)) {
        return Promise.reject(validateBits$3(bits));
    }
    let keyBuffer = null;
    let initParam = bits;
    if (key !== null) {
        keyBuffer = getUInt8Buffer(key);
        if (keyBuffer.length > 32) {
            return Promise.reject(new Error('Max key length is 32 bytes'));
        }
        initParam = getInitParam(bits, keyBuffer.length);
    }
    const outputSize = bits / 8;
    return WASMInterface(wasmJson$f, outputSize).then((wasm) => {
        if (initParam > 512) {
            wasm.writeMemory(keyBuffer);
        }
        wasm.init(initParam);
        const obj = {
            init: initParam > 512
                ? () => {
                    wasm.writeMemory(keyBuffer);
                    wasm.init(initParam);
                    return obj;
                }
                : () => {
                    wasm.init(initParam);
                    return obj;
                },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: outputSize,
        };
        return obj;
    });
}

var name$e = "blake3";
var data$e = "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A5iIATcD+AEgAUGAAmogAUHgAWogCUHAAEIAIBQQAyABKQOgAiEKIAEpA4ACIQQgASkDqAIhBSABKQOIAiEGIAEpA7ACIQcgASkDkAIhDCACQRhqIAEpA7gCIAEpA5gChTcDACACQRBqIAcgDIU3AwAgAkEIaiAFIAaFNwMAIAIgCiAEhTcDACACQSBqIQIgC0EEaiELIAhBf2oiCA0ACwJAAkAgE0F+cSATSQ0AIBYhEwwBCyABIBZBBXRqIgIgAUHwAGogFkEGdGoiCykDADcDACACIAspAwg3AwggAiALKQMQNwMQIAIgCykDGDcDGCAVQQJqIRMLIAEgASkDACIGNwNwIAEgASkDCCIFNwN4IAEgASkDECIENwOAASABIAEpAxgiCjcDiAEgE0ECSw0ACwsgASkDkAEhByABKQOYASEMIAEpA6ABIQ4gASkDqAEhEUEAKQPAiAEQBEEALQCQiQEiC0EFdCICQaGJAWogBDcDACACQZmJAWogBTcDAEEAIAtBAWo6AJCJASACQZGJAWogBjcDACACQamJAWogCjcDAEEAKQPAiAEgDUIBiHwQBEEAQQAtAJCJASICQQFqOgCQiQEgAkEFdCICQamJAWogETcDACACQaGJAWogDjcDACACQZmJAWogDDcDACACQZGJAWogBzcDAAtBAEEAKQPAiAEgDXwiBDcDwIgBIAMgEGohAyAAIBBrIgBBgAhLDQALIABFDQELQaCIASADIAAQAkEAKQPAiAEQBAsgAUHQAmokAAv7BAEFfyMAQcAAayIDJAACQAJAIAAtAGgiBEUNAAJAIAJBwAAgBGsiBSAFIAJLGyIFRQ0AIAAgBGpBKGohBkEAIQQDQCAGIARqIAEgBGotAAA6AAAgBEEBaiIEIAVJDQALIAAtAGghBAsgACAEIAVqIgQ6AGggASAFaiEBAkAgAiAFayICDQBBACECDAILIAMgACAAQShqQcAAIAApAyAgAC0AaiAAQekAaiIELQAARXIQAyAAIAMpAyAgAykDAIU3AwAgACADKQMoIAMpAwiFNwMIIAAgAykDMCADKQMQhTcDECAAIAMpAzggAykDGIU3AxggAEEAOgBoIABB4ABqQgA3AwAgAEHYAGpCADcDACAAQdAAakIANwMAIABByABqQgA3AwAgAEHAAGpCADcDACAAQThqQgA3AwAg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AXEgCCACQQhyQf8BcRADIAEgASkD2AEiDSABKQO4AYU3A3ggASABKQPgASIOIAEpA8ABhTcDgAEgASAGIAEpA+gBIg+FNwOoASABIAUgDoU3A6ABIAEgBCANhTcDmAEgASADIAEpA9ABIg2FNwOQASABIA8gASkDyAGFNwOIASAAQcAAIABBwABJGyIQQX9qIQkgASANIAEpA7ABhSINNwNwIA2nIREgCiEHIAwhAgJAA0AgAiAROgAAIAlFDQEgCUF/aiEJIAJBAWohAiAHLQAAIREgB0EBaiEHDAALCyAAIBBrIgBFDQIgDCAQaiEMIAhCAXwhCCABKQMIIQQgASkDACEDIAEpAxghBiABKQMQIQUgAS0AaSECIAEtAGghCQwACwsCQAJAAkBBAC0AiYkBIglBBnRBAEEALQCIiQEiDGtGDQAgAUHgAGpBACkDgIkBNwMAIAFB2ABqQQApA/iIATcDACABQdAAakEAKQPwiAE3AwAgAUHIAGpBACkD6IgBNwMAIAFBwABqQQApA+CIATcDACABQThqQQApA9iIATcDACABQTBqQQApA9CIATcDACABQQApA8iIATcDKCABQQApA8CIASIINwMgIAFBACkDuIgBIg03AxggAUEAKQOwiAEiDjcDECABQQApA6iIASIPNwMIIAFBACkDoIgBIgM3AwBBAC0AiokBIQcgAUHuAGogAUG0AWovAQA7AQAgASABKAGwATYBaiABIAw6AGggASAHIAlFckECciIJOgBpDAELIAFB4ABqIAJBfmoiAkEFdCIJQcmJAWopAwA3AwAgAUHYAGogCUHBiQFqKQMANwMAIAFB0ABqIAlBuYkBaikDADcDACABQcgAaiAJQbGJAWopAwA3AwBBwAAhDCABQcAAaiAJQamJAWopAwA3AwAgAUE4aiAJQaGJAWopAwA3AwAgAUEwaiAJQZmJAWopAwA3AwBCACEIIAFCADcDICABQQApA5iIASINNwMYIAFBACkDkIgBIg43AxAgAUEAKQOIiAEiDzcDCCABQQApA4CIASIDNwMAIAEgCUGRiQFqKQMANwMoQQAtAIqJASEJIAFB7gBqIAFBsAFqQQRqLwEAOwEAIAEgASgBsAE2AWogASAJQQRyIgk6AGkgAUHAADoAaCACRQ0BCyACQX9qIgdBBXQiEUGRiQFqKQMAIQQgEUGZiQFqKQMAIQUgEUGhiQFqKQMAIQYgEUGpiQFqKQMAIRIgASANNwOIASABIA43A4ABIAEgDzcDeCABIAM3A3AgAUGwAWogAUHwAGogAUEoaiIQIAwgCCAJQf8BcRADIAFBwAA6AGggASASNwNAIAEgBjcDOCABIAU3AzAgASAENwMoIAFCADcDICABQQApA5iIASIINwMYIAFBACkDkIgBIg03AxAgAUEAKQOIiAEiDjcDCCABQQApA4CIASIPNwMAIAFBAC0AiokBQQRyIgk6AGkgASABKQPoASABKQPIAYU3A2AgASABKQPgASABKQPAAYU3A1ggASABKQPYASABKQO4AYU3A1AgASABKQPQASABKQOwAYU3A0ggAUHuAGogAUGwAWpBBGoiDC8BADsBACABIAEoAbABNgFqIAdFDQAgAUHqAGohESACQQV0QemIAWohAgNAIAJBaGopAwAhAyACQXBqKQMAIQQgAkF4aikDACEFIAIpAwAhBiABIAg3A4gBIAEgDTcDgAEgASAONwN4IAEgDzcDcCABQbABaiABQfAAaiAQQcAAQgAgCUH/AXEQAyABQcAAOgBoIAEgBjcDQCABIAU3AzggASAENwMwIAEgAzcDKCABQgA3AyAgAUEAKQOYiAEiCDcDGCABQQApA5CIASINNwMQIAFBACkDiIgBIg43AwggAUEAKQOAiAEiDzcDACABQQAtAIqJAUEEciIJOgBpIAEgASkD6AEgASkDyAGFNwNgIAEgASkD4AEgASkDwAGFNwNYIAEgASkD2AEgASkDuAGFNwNQIAEgASkD0AEgASkDsAGFNwNIIBFBBGogDC8BADsBACARIAEoAbABNgEAIAJBYGohAiAHQX9qIgcNAAsLIAFB8ABqQQFyIQogAUEoaiELQgAhCEGACCEMQcAAIQIDQCABQbABaiABIAsgAkH/AXEgCCAJQQhyQf8BcRADIAEgASkD2AEiDSABKQO4AYU3A3ggASABKQPgASIOIAEpA8ABhTcDgAEgASABKQPoASIPIAEpA8gBhTcDiAEgASABKQMAIAEpA9ABIgOFNwOQASABIA0gASkDCIU3A5gBIAEgDiABKQMQhTcDoAEgASADIAEpA7ABhSINNwNwIAEgDyABKQMYhTcDqAEgAEHAACAAQcAASRsiEEF/aiECIA2nIREgCiEHIAwhCQJAA0AgCSAROgAAIAJFDQEgAkF/aiECIAlBAWohCSAHLQAAIREgB0EBaiEHDAALCyAAIBBrIgBFDQEgDCAQaiEMIAhCAXwhCCABLQBpIQkgAS0AaCECDAALCyABQfABaiQAC6MCAQR+AkACQCAAQSBGDQBCq7OP/JGjs/DbACEBQv+kuYjFkdqCm38hAkLy5rvjo6f9p6V/IQNC58yn0NbQ67O7fyEEQQAhAAwBC0EAKQOYCCEBQQApA5AIIQJBACkDiAghA0EAKQOACCEEQRAhAAtBACAAOgCKiQFBAEIANwOAiQFBAEIANwP4iAFBAEIANwPwiAFBAEIANwPoiAFBAEIANwPgiAFBAEIANwPYiAFBAEIANwPQiAFBAEIANwPIiAFBAEIANwPAiAFBACABNwO4iAFBACACNwOwiAFBACADNwOoiAFBACAENwOgiAFBACABNwOYiAFBACACNwOQiAFBACADNwOIiAFBACAENwOAiAFBAEEAOgCQiQFBAEEAOwGIiQELBgAgABABCwYAIAAQBgurAgEEfgJAAkAgAUEgRg0AQquzj/yRo7Pw2wAhA0L/pLmIxZHagpt/IQRC8ua746On/aelfyEFQufMp9DW0Ouzu38hBkEAIQEMAQtBACkDmAghA0EAKQOQCCEEQQApA4gIIQVBACkDgAghBkEQIQELQQAgAToAiokBQQBCADcDgIkBQQBCADcD+IgBQQBCADcD8IgBQQBCADcD6IgBQQBCADcD4IgBQQBCADcD2IgBQQBCADcD0IgBQQBCADcDyIgBQQBCADcDwIgBQQAgAzcDuIgBQQAgBDcDsIgBQQAgBTcDqIgBQQAgBjcDoIgBQQAgAzcDmIgBQQAgBDcDkIgBQQAgBTcDiIgBQQAgBjcDgIgBQQBBADoAkIkBQQBBADsBiIkBIAAQASACEAYL";
var wasmJson$e = {
	name: name$e,
	data: data$e
};

const mutex$f = new Mutex();
let wasmCache$f = null;
function validateBits$2(bits) {
    if (!Number.isInteger(bits) || bits < 8 || bits % 8 !== 0) {
        return new Error('Invalid variant! Valid values: 8, 16, ...');
    }
    return null;
}
/**
 * Calculates BLAKE3 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param bits Number of output bits, which has to be a number
 *             divisible by 8. Defaults to 256.
 * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.
 * @returns Computed hash as a hexadecimal string
 */
function blake3(data, bits = 256, key = null) {
    if (validateBits$2(bits)) {
        return Promise.reject(validateBits$2(bits));
    }
    let keyBuffer = null;
    let initParam = 0; // key is empty by default
    if (key !== null) {
        keyBuffer = getUInt8Buffer(key);
        if (keyBuffer.length !== 32) {
            return Promise.reject(new Error('Key length must be exactly 32 bytes'));
        }
        initParam = 32;
    }
    const hashLength = bits / 8;
    const digestParam = hashLength;
    if (wasmCache$f === null || wasmCache$f.hashLength !== hashLength) {
        return lockedCreate(mutex$f, wasmJson$e, hashLength)
            .then((wasm) => {
            wasmCache$f = wasm;
            if (initParam === 32) {
                wasmCache$f.writeMemory(keyBuffer);
            }
            return wasmCache$f.calculate(data, initParam, digestParam);
        });
    }
    try {
        if (initParam === 32) {
            wasmCache$f.writeMemory(keyBuffer);
        }
        const hash = wasmCache$f.calculate(data, initParam, digestParam);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new BLAKE3 hash instance
 * @param bits Number of output bits, which has to be a number
 *             divisible by 8. Defaults to 256.
 * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.
 */
function createBLAKE3(bits = 256, key = null) {
    if (validateBits$2(bits)) {
        return Promise.reject(validateBits$2(bits));
    }
    let keyBuffer = null;
    let initParam = 0; // key is empty by default
    if (key !== null) {
        keyBuffer = getUInt8Buffer(key);
        if (keyBuffer.length !== 32) {
            return Promise.reject(new Error('Key length must be exactly 32 bytes'));
        }
        initParam = 32;
    }
    const outputSize = bits / 8;
    const digestParam = outputSize;
    return WASMInterface(wasmJson$e, outputSize).then((wasm) => {
        if (initParam === 32) {
            wasm.writeMemory(keyBuffer);
        }
        wasm.init(initParam);
        const obj = {
            init: initParam === 32
                ? () => {
                    wasm.writeMemory(keyBuffer);
                    wasm.init(initParam);
                    return obj;
                }
                : () => {
                    wasm.init(initParam);
                    return obj;
                },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType, digestParam),
            blockSize: 64,
            digestSize: outputSize,
        };
        return obj;
    });
}

var name$d = "crc32";
var data$d = "AGFzbQEAAAABDANgAAF/YAAAYAF/AAMHBgABAQIBAgQFAXABAQEFBAEBAgIGCAF/AUGQyAULB1MGBm1lbW9yeQIADkhhc2hfR2V0QnVmZmVyAAAJSGFzaF9Jbml0AAILSGFzaF9VcGRhdGUAAwpIYXNoX0ZpbmFsAAQOSGFzaF9DYWxjdWxhdGUABQrcBwYFAEGACAvjAwEEf0GAiAEhAEEAIQEDQCAAQQBBAEEAQQAgAUEBdiICQQFxa0GghuLtfnFBACABQQFxa0GghuLtfnEgAnNBAXYiAnNBAXYiA0EBcWtBoIbi7X5xQQAgAkEBcWtBoIbi7X5xIANzQQF2IgJzQQF2IgNBAXFrQaCG4u1+cUEAIAJBAXFrQaCG4u1+cSADc0EBdiICc0EBdiIDQQFxa0GghuLtfnFBACACQQFxa0GghuLtfnEgA3NBAXZzNgIAIABBBGohACABQQFqIgFBgAJHDQALQQAhAQNAIAFBhJABaiABQYSIAWooAgAiAEH/AXFBAnRBgIgBaigCACAAQQh2cyIANgIAIAFBhJgBaiAAQf8BcUECdEGAiAFqKAIAIABBCHZzIgA2AgAgAUGEoAFqIABB/wFxQQJ0QYCIAWooAgAgAEEIdnMiADYCACABQYSoAWogAEH/AXFBAnRBgIgBaigCACAAQQh2cyIANgIAIAFBhLABaiAAQf8BcUECdEGAiAFqKAIAIABBCHZzIgA2AgAgAUGEuAFqIABB/wFxQQJ0QYCIAWooAgAgAEEIdnMiADYCACABQYTAAWogAEH/AXFBAnRBgIgBaigCACAAQQh2czYCACABQQRqIgFB/AdHDQALCyIAAkBBAC0AgMgBDQAQAUEAQQE6AIDIAQtBAEEANgKEyAELwQIBBn9BACgChMgBQX9zIQFBgAghAgJAIABBCEkNACAAQXhqIgNBeHEiBEEIaiEFQYAIIQIDQCACQQRqKAIAIgZBDnZB/AdxQYCQAWooAgAgBkEWdkH8B3FBgIgBaigCAHMgBkEGdkH8B3FBgJgBaigCAHMgBkH/AXFBAnRBgKABaigCAHMgAigCACABcyIBQRZ2QfwHcUGAqAFqKAIAcyABQQ52QfwHcUGAsAFqKAIAcyABQQZ2QfwHcUGAuAFqKAIAcyABQf8BcUECdEGAwAFqKAIAcyEBIAJBCGohAiAAQXhqIgBBB0sNAAsgAyAEayEAIAVBgAhqIQILAkAgAEUNAANAIAFB/wFxIAItAABzQQJ0QYCIAWooAgAgAUEIdnMhASACQQFqIQIgAEF/aiIADQALC0EAIAFBf3M2AoTIAQszAQF/QQBBACgChMgBIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYCgAgLVQACQEEALQCAyAENABABQQBBAToAgMgBC0EAQQA2AoTIASAAEANBAEEAKAKEyAEiAEEYdCAAQQh0QYCA/AdxciAAQQh2QYD+A3EgAEEYdnJyNgKACAs=";
var wasmJson$d = {
	name: name$d,
	data: data$d
};

const mutex$e = new Mutex();
let wasmCache$e = null;
/**
 * Calculates CRC-32 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function crc32(data) {
    if (wasmCache$e === null) {
        return lockedCreate(mutex$e, wasmJson$d, 4)
            .then((wasm) => {
            wasmCache$e = wasm;
            return wasmCache$e.calculate(data);
        });
    }
    try {
        const hash = wasmCache$e.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new CRC-32 hash instance
 */
function createCRC32() {
    return WASMInterface(wasmJson$d, 4).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 4,
            digestSize: 4,
        };
        return obj;
    });
}

var name$c = "md4";
var data$c = "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";
var wasmJson$c = {
	name: name$c,
	data: data$c
};

const mutex$d = new Mutex();
let wasmCache$d = null;
/**
 * Calculates MD4 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function md4(data) {
    if (wasmCache$d === null) {
        return lockedCreate(mutex$d, wasmJson$c, 16)
            .then((wasm) => {
            wasmCache$d = wasm;
            return wasmCache$d.calculate(data);
        });
    }
    try {
        const hash = wasmCache$d.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new MD4 hash instance
 */
function createMD4() {
    return WASMInterface(wasmJson$c, 16).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 16,
        };
        return obj;
    });
}

var name$b = "md5";
var data$b = "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";
var wasmJson$b = {
	name: name$b,
	data: data$b
};

const mutex$c = new Mutex();
let wasmCache$c = null;
/**
 * Calculates MD5 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function md5(data) {
    if (wasmCache$c === null) {
        return lockedCreate(mutex$c, wasmJson$b, 16)
            .then((wasm) => {
            wasmCache$c = wasm;
            return wasmCache$c.calculate(data);
        });
    }
    try {
        const hash = wasmCache$c.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new MD5 hash instance
 */
function createMD5() {
    return WASMInterface(wasmJson$b, 16).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 16,
        };
        return obj;
    });
}

var name$a = "sha1";
var data$a = "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";
var wasmJson$a = {
	name: name$a,
	data: data$a
};

const mutex$b = new Mutex();
let wasmCache$b = null;
/**
 * Calculates SHA-1 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function sha1(data) {
    if (wasmCache$b === null) {
        return lockedCreate(mutex$b, wasmJson$a, 20)
            .then((wasm) => {
            wasmCache$b = wasm;
            return wasmCache$b.calculate(data);
        });
    }
    try {
        const hash = wasmCache$b.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SHA-1 hash instance
 */
function createSHA1() {
    return WASMInterface(wasmJson$a, 20).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 20,
        };
        return obj;
    });
}

var name$9 = "sha3";
var data$9 = "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";
var wasmJson$9 = {
	name: name$9,
	data: data$9
};

const mutex$a = new Mutex();
let wasmCache$a = null;
function validateBits$1(bits) {
    if (![224, 256, 384, 512].includes(bits)) {
        return new Error('Invalid variant! Valid values: 224, 256, 384, 512');
    }
    return null;
}
/**
 * Calculates SHA-3 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param bits Number of output bits. Valid values: 224, 256, 384, 512
 * @returns Computed hash as a hexadecimal string
 */
function sha3(data, bits = 512) {
    if (validateBits$1(bits)) {
        return Promise.reject(validateBits$1(bits));
    }
    const hashLength = bits / 8;
    if (wasmCache$a === null || wasmCache$a.hashLength !== hashLength) {
        return lockedCreate(mutex$a, wasmJson$9, hashLength)
            .then((wasm) => {
            wasmCache$a = wasm;
            return wasmCache$a.calculate(data, bits, 0x06);
        });
    }
    try {
        const hash = wasmCache$a.calculate(data, bits, 0x06);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SHA-3 hash instance
 * @param bits Number of output bits. Valid values: 224, 256, 384, 512
 */
function createSHA3(bits = 512) {
    if (validateBits$1(bits)) {
        return Promise.reject(validateBits$1(bits));
    }
    const outputSize = bits / 8;
    return WASMInterface(wasmJson$9, outputSize).then((wasm) => {
        wasm.init(bits);
        const obj = {
            init: () => { wasm.init(bits); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType, 0x06),
            blockSize: 200 - 2 * outputSize,
            digestSize: outputSize,
        };
        return obj;
    });
}

const mutex$9 = new Mutex();
let wasmCache$9 = null;
function validateBits(bits) {
    if (![224, 256, 384, 512].includes(bits)) {
        return new Error('Invalid variant! Valid values: 224, 256, 384, 512');
    }
    return null;
}
/**
 * Calculates Keccak hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param bits Number of output bits. Valid values: 224, 256, 384, 512
 * @returns Computed hash as a hexadecimal string
 */
function keccak(data, bits = 512) {
    if (validateBits(bits)) {
        return Promise.reject(validateBits(bits));
    }
    const hashLength = bits / 8;
    if (wasmCache$9 === null || wasmCache$9.hashLength !== hashLength) {
        return lockedCreate(mutex$9, wasmJson$9, hashLength)
            .then((wasm) => {
            wasmCache$9 = wasm;
            return wasmCache$9.calculate(data, bits, 0x01);
        });
    }
    try {
        const hash = wasmCache$9.calculate(data, bits, 0x01);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new Keccak hash instance
 * @param bits Number of output bits. Valid values: 224, 256, 384, 512
 */
function createKeccak(bits = 512) {
    if (validateBits(bits)) {
        return Promise.reject(validateBits(bits));
    }
    const outputSize = bits / 8;
    return WASMInterface(wasmJson$9, outputSize).then((wasm) => {
        wasm.init(bits);
        const obj = {
            init: () => { wasm.init(bits); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType, 0x01),
            blockSize: 200 - 2 * outputSize,
            digestSize: outputSize,
        };
        return obj;
    });
}

var name$8 = "sha256";
var data$8 = "";
var wasmJson$8 = {
	name: name$8,
	data: data$8
};

const mutex$8 = new Mutex();
let wasmCache$8 = null;
/**
 * Calculates SHA-2 (SHA-224) hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function sha224(data) {
    if (wasmCache$8 === null) {
        return lockedCreate(mutex$8, wasmJson$8, 28)
            .then((wasm) => {
            wasmCache$8 = wasm;
            return wasmCache$8.calculate(data, 224);
        });
    }
    try {
        const hash = wasmCache$8.calculate(data, 224);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SHA-2 (SHA-224) hash instance
 */
function createSHA224() {
    return WASMInterface(wasmJson$8, 28).then((wasm) => {
        wasm.init(224);
        const obj = {
            init: () => { wasm.init(224); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 28,
        };
        return obj;
    });
}

const mutex$7 = new Mutex();
let wasmCache$7 = null;
/**
 * Calculates SHA-2 (SHA-256) hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function sha256(data) {
    if (wasmCache$7 === null) {
        return lockedCreate(mutex$7, wasmJson$8, 32)
            .then((wasm) => {
            wasmCache$7 = wasm;
            return wasmCache$7.calculate(data, 256);
        });
    }
    try {
        const hash = wasmCache$7.calculate(data, 256);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SHA-2 (SHA-256) hash instance
 */
function createSHA256() {
    return WASMInterface(wasmJson$8, 32).then((wasm) => {
        wasm.init(256);
        const obj = {
            init: () => { wasm.init(256); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 32,
        };
        return obj;
    });
}

var name$7 = "sha512";
var data$7 = "";
var wasmJson$7 = {
	name: name$7,
	data: data$7
};

const mutex$6 = new Mutex();
let wasmCache$6 = null;
/**
 * Calculates SHA-2 (SHA-384) hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function sha384(data) {
    if (wasmCache$6 === null) {
        return lockedCreate(mutex$6, wasmJson$7, 48)
            .then((wasm) => {
            wasmCache$6 = wasm;
            return wasmCache$6.calculate(data, 384);
        });
    }
    try {
        const hash = wasmCache$6.calculate(data, 384);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SHA-2 (SHA-384) hash instance
 */
function createSHA384() {
    return WASMInterface(wasmJson$7, 48).then((wasm) => {
        wasm.init(384);
        const obj = {
            init: () => { wasm.init(384); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 128,
            digestSize: 48,
        };
        return obj;
    });
}

const mutex$5 = new Mutex();
let wasmCache$5 = null;
/**
 * Calculates SHA-2 (SHA-512) hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function sha512(data) {
    if (wasmCache$5 === null) {
        return lockedCreate(mutex$5, wasmJson$7, 64)
            .then((wasm) => {
            wasmCache$5 = wasm;
            return wasmCache$5.calculate(data, 512);
        });
    }
    try {
        const hash = wasmCache$5.calculate(data, 512);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SHA-2 (SHA-512) hash instance
 */
function createSHA512() {
    return WASMInterface(wasmJson$7, 64).then((wasm) => {
        wasm.init(512);
        const obj = {
            init: () => { wasm.init(512); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 128,
            digestSize: 64,
        };
        return obj;
    });
}

var name$6 = "xxhash32";
var data$6 = "AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwYFAAEBAgMEBQFwAQEBBQQBAQICBggBfwFB0IgFCwdTBgZtZW1vcnkCAA5IYXNoX0dldEJ1ZmZlcgAACUhhc2hfSW5pdAABC0hhc2hfVXBkYXRlAAIKSGFzaF9GaW5hbAADDkhhc2hfQ2FsY3VsYXRlAAQK/QgFBQBBgAgLTQBBACAANgK4iAFBAEIANwOIiAFBACAAQfeUr694ajYCsIgBQQAgAEGoiI2hAmo2AqCIAUEAIABBz4yijgZqNgLAiAFBAEEANgKAiAELhQUBB38CQCAARQ0AQQAhAUEAQQApA4iIASAArXw3A4iIAQJAQQAoAoCIASICIABqQQ9LDQADQCACIAFqQZCIAWogAUGACGotAAA6AAAgACABQQFqIgFHDQALQQAgAiABajYCgIgBDwsgAEHwB2ohAwJAAkAgAg0AQQAoAsCIASEEQQAoAriIASEFQQAoArCIASEGQQAoAqCIASEHQYAIIQEMAQtBgAghAQJAIAJBD0sNAEGACCEBA0AgAkGQiAFqIAEtAAA6AAAgAUEBaiEBIAJBD0khBCACQQFqIgUhAiAEDQALQQAgBTYCgIgBC0EAQQAoApCIAUH3lK+veGxBACgCoIgBakENd0Gx893xeWwiBzYCoIgBQQBBACgClIgBQfeUr694bEEAKAKwiAFqQQ13QbHz3fF5bCIGNgKwiAFBAEEAKAKYiAFB95Svr3hsQQAoAriIAWpBDXdBsfPd8XlsIgU2AriIAUEAQQAoApyIAUH3lK+veGxBACgCwIgBakENd0Gx893xeWwiBDYCwIgBCyAAQYAIaiEAAkAgASADSw0AA0AgASgCAEH3lK+veGwgB2pBDXdBsfPd8XlsIQcgAUEMaigCAEH3lK+veGwgBGpBDXdBsfPd8XlsIQQgAUEIaigCAEH3lK+veGwgBWpBDXdBsfPd8XlsIQUgAUEEaigCAEH3lK+veGwgBmpBDXdBsfPd8XlsIQYgAUEQaiIBIANNDQALC0EAIQJBACAGNgKwiAFBACAHNgKgiAFBACAFNgK4iAFBACAENgLAiAFBACAAIAFrIgA2AoCIASAARQ0AA0AgAkGQiAFqIAEgAmotAAA6AAAgACACQQFqIgJHDQALCwvLAgIBfgZ/QQApA4iIASIApyEBAkACQCAAQhBUDQBBACgCsIgBQQd3QQAoAqCIAUEBd2pBACgCuIgBQQx3akEAKALAiAFBEndqIQIMAQtBACgCuIgBQbHP2bIBaiECCyACIAFqIQJBkIgBIQFBACgCgIgBIgNBkIgBaiEEAkAgA0EESA0AQZCIASEFA0AgBSgCAEG93MqVfGwgAmpBEXdBr9bTvgJsIQIgBUEIaiEGIAVBBGoiASEFIAYgBE0NAAsLAkAgASAERg0AIANBkIgBaiEFA0AgAS0AAEGxz9myAWwgAmpBC3dBsfPd8XlsIQIgBSABQQFqIgFHDQALC0EAIAJBD3YgAnNB95Svr3hsIgFBDXYgAXNBvdzKlXxsIgFBEHYiAjoAgQhBACABQRh2OgCACEEAIAIgAXMiAToAgwhBACABQQh2OgCCCAtTAEEAIAE2AriIAUEAQgA3A4iIAUEAIAFB95Svr3hqNgKwiAFBACABQaiIjaECajYCoIgBQQAgAUHPjKKOBmo2AsCIAUEAQQA2AoCIASAAEAIQAws=";
var wasmJson$6 = {
	name: name$6,
	data: data$6
};

const mutex$4 = new Mutex();
let wasmCache$4 = null;
function validateSeed$1(seed) {
    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {
        return new Error('Seed must be a valid 32-bit long unsigned integer.');
    }
    return null;
}
/**
 * Calculates xxHash32 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)
 * @returns Computed hash as a hexadecimal string
 */
function xxhash32(data, seed = 0) {
    if (validateSeed$1(seed)) {
        return Promise.reject(validateSeed$1(seed));
    }
    if (wasmCache$4 === null) {
        return lockedCreate(mutex$4, wasmJson$6, 4)
            .then((wasm) => {
            wasmCache$4 = wasm;
            return wasmCache$4.calculate(data, seed);
        });
    }
    try {
        const hash = wasmCache$4.calculate(data, seed);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new xxHash32 hash instance
 * @param data Input data (string, Buffer or TypedArray)
 * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)
 */
function createXXHash32(seed = 0) {
    if (validateSeed$1(seed)) {
        return Promise.reject(validateSeed$1(seed));
    }
    return WASMInterface(wasmJson$6, 4).then((wasm) => {
        wasm.init(seed);
        const obj = {
            init: () => { wasm.init(seed); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 16,
            digestSize: 4,
        };
        return obj;
    });
}

var name$5 = "xxhash64";
var data$5 = "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";
var wasmJson$5 = {
	name: name$5,
	data: data$5
};

const mutex$3 = new Mutex();
let wasmCache$3 = null;
const seedBuffer = new ArrayBuffer(8);
function validateSeed(seed) {
    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {
        return new Error('Seed must be given as two valid 32-bit long unsigned integer (lo + high).');
    }
    return null;
}
function writeSeed(arr, low, high) {
    // write in little-endian format
    const buffer = new DataView(arr);
    buffer.setUint32(0, low, true);
    buffer.setUint32(4, high, true);
}
/**
 * Calculates xxHash64 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @param seedLow Lower 32 bits of the number used to
 *  initialize the internal state of the algorithm (defaults to 0)
 * @param seedHigh Higher 32 bits of the number used to
 *  initialize the internal state of the algorithm (defaults to 0)
 * @returns Computed hash as a hexadecimal string
 */
function xxhash64(data, seedLow = 0, seedHigh = 0) {
    if (validateSeed(seedLow)) {
        return Promise.reject(validateSeed(seedLow));
    }
    if (validateSeed(seedHigh)) {
        return Promise.reject(validateSeed(seedHigh));
    }
    if (wasmCache$3 === null) {
        return lockedCreate(mutex$3, wasmJson$5, 8)
            .then((wasm) => {
            wasmCache$3 = wasm;
            writeSeed(seedBuffer, seedLow, seedHigh);
            wasmCache$3.writeMemory(new Uint8Array(seedBuffer));
            return wasmCache$3.calculate(data);
        });
    }
    try {
        writeSeed(seedBuffer, seedLow, seedHigh);
        wasmCache$3.writeMemory(new Uint8Array(seedBuffer));
        const hash = wasmCache$3.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new xxHash64 hash instance
 * @param seedLow Lower 32 bits of the number used to
 *  initialize the internal state of the algorithm (defaults to 0)
 * @param seedHigh Higher 32 bits of the number used to
 *  initialize the internal state of the algorithm (defaults to 0)
 */
function createXXHash64(seedLow = 0, seedHigh = 0) {
    if (validateSeed(seedLow)) {
        return Promise.reject(validateSeed(seedLow));
    }
    if (validateSeed(seedHigh)) {
        return Promise.reject(validateSeed(seedHigh));
    }
    return WASMInterface(wasmJson$5, 8).then((wasm) => {
        const instanceBuffer = new ArrayBuffer(8);
        writeSeed(instanceBuffer, seedLow, seedHigh);
        wasm.writeMemory(new Uint8Array(instanceBuffer));
        wasm.init();
        const obj = {
            init: () => {
                wasm.writeMemory(new Uint8Array(instanceBuffer));
                wasm.init();
                return obj;
            },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 32,
            digestSize: 8,
        };
        return obj;
    });
}

var name$4 = "ripemd160";
var data$4 = "";
var wasmJson$4 = {
	name: name$4,
	data: data$4
};

const mutex$2 = new Mutex();
let wasmCache$2 = null;
/**
 * Calculates RIPEMD-160 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function ripemd160(data) {
    if (wasmCache$2 === null) {
        return lockedCreate(mutex$2, wasmJson$4, 20)
            .then((wasm) => {
            wasmCache$2 = wasm;
            return wasmCache$2.calculate(data);
        });
    }
    try {
        const hash = wasmCache$2.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new RIPEMD-160 hash instance
 */
function createRIPEMD160() {
    return WASMInterface(wasmJson$4, 20).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 20,
        };
        return obj;
    });
}

function calculateKeyBuffer(hasher, key) {
    const { blockSize } = hasher;
    const buf = getUInt8Buffer(key);
    if (buf.length > blockSize) {
        hasher.update(buf);
        const uintArr = hasher.digest('binary');
        hasher.init();
        return uintArr;
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);
}
function calculateHmac(hasher, key) {
    hasher.init();
    const { blockSize } = hasher;
    const keyBuf = calculateKeyBuffer(hasher, key);
    const keyBuffer = new Uint8Array(blockSize);
    keyBuffer.set(keyBuf);
    const opad = new Uint8Array(blockSize);
    for (let i = 0; i < blockSize; i++) {
        const v = keyBuffer[i];
        opad[i] = v ^ 0x5C;
        keyBuffer[i] = v ^ 0x36;
    }
    hasher.update(keyBuffer);
    const obj = {
        init: () => {
            hasher.init();
            hasher.update(keyBuffer);
            return obj;
        },
        update: (data) => {
            hasher.update(data);
            return obj;
        },
        digest: ((outputType) => {
            const uintArr = hasher.digest('binary');
            hasher.init();
            hasher.update(opad);
            hasher.update(uintArr);
            return hasher.digest(outputType);
        }),
        blockSize: hasher.blockSize,
        digestSize: hasher.digestSize,
    };
    return obj;
}
/**
 * Calculates HMAC hash
 * @param hash Hash algorithm to use. It has to be the return value of a function like createSHA1()
 * @param key Key (string, Buffer or TypedArray)
 */
function createHMAC(hash, key) {
    if (!hash || !hash.then) {
        throw new Error('Invalid hash function is provided! Usage: createHMAC(createMD5(), "key").');
    }
    return hash.then((hasher) => calculateHmac(hasher, key));
}

function calculatePBKDF2(digest, salt, iterations, hashLength, outputType) {
    return __awaiter(this, void 0, void 0, function* () {
        const DK = new Uint8Array(hashLength);
        const block1 = new Uint8Array(salt.length + 4);
        const block1View = new DataView(block1.buffer);
        const saltBuffer = getUInt8Buffer(salt);
        const saltUIntBuffer = new Uint8Array(saltBuffer.buffer, saltBuffer.byteOffset, saltBuffer.length);
        block1.set(saltUIntBuffer);
        let destPos = 0;
        const hLen = digest.digestSize;
        const l = Math.ceil(hashLength / hLen);
        let T = null;
        let U = null;
        for (let i = 1; i <= l; i++) {
            block1View.setUint32(salt.length, i);
            digest.init();
            digest.update(block1);
            T = digest.digest('binary');
            U = T.slice();
            for (let j = 1; j < iterations; j++) {
                digest.init();
                digest.update(U);
                U = digest.digest('binary');
                for (let k = 0; k < hLen; k++) {
                    T[k] ^= U[k];
                }
            }
            DK.set(T.subarray(0, hashLength - destPos), destPos);
            destPos += hLen;
        }
        if (outputType === 'binary') {
            return DK;
        }
        const digestChars = new Uint8Array(hashLength * 2);
        return getDigestHex(digestChars, DK, hashLength);
    });
}
const validateOptions$2 = (options) => {
    if (!options || typeof options !== 'object') {
        throw new Error('Invalid options parameter. It requires an object.');
    }
    if (!options.hashFunction || !options.hashFunction.then) {
        throw new Error('Invalid hash function is provided! Usage: pbkdf2("password", "salt", 1000, 32, createSHA1()).');
    }
    if (!Number.isInteger(options.iterations) || options.iterations < 1) {
        throw new Error('Iterations should be a positive number');
    }
    if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {
        throw new Error('Hash length should be a positive number');
    }
    if (options.outputType === undefined) {
        options.outputType = 'hex';
    }
    if (!['hex', 'binary'].includes(options.outputType)) {
        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);
    }
};
/**
 * Generates a new PBKDF2 hash for the supplied password
 */
function pbkdf2(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateOptions$2(options);
        const hmac = yield createHMAC(options.hashFunction, options.password);
        return calculatePBKDF2(hmac, options.salt, options.iterations, options.hashLength, options.outputType);
    });
}

var name$3 = "scrypt";
var data$3 = "AGFzbQEAAAABIwZgAX8Bf2AAAX9gBX9/fn9/AGAEf39/fwBgAX8AYAN/f38AAwcGAAECAwQFBAUBcAEBAQUGAQECgIACBggBfwFBkIgECwc5BAZtZW1vcnkCABJIYXNoX1NldE1lbW9yeVNpemUAAA5IYXNoX0dldEJ1ZmZlcgABBnNjcnlwdAAFCpomBlsBAX9BACEBAkAgAEEAKAKACGsiAEUNAAJAIABBEHYgAEGAgHxxIABJaiIAQABBf0cNAEH/ASEBDAELQQAhAUEAQQApA4AIIABBEHStfDcDgAgLIAFBGHRBGHULagECfwJAQQAoAogIIgANAEEAPwBBEHQiADYCiAhBgIAgQQAoAoAIayIBRQ0AAkAgAUEQdiABQYCAfHEgAUlqIgBAAEF/Rw0AQQAPC0EAQQApA4AIIABBEHStfDcDgAhBACgCiAghAAsgAAu8EAMMfwl+An8gAUEFdCEFAkAgAUUNAEEAIQYgACEHIAQhCANAIAggBygCADYCACAHQQRqIQcgCEEEaiEIIAZBAWoiBiAFSQ0ACwsCQCACUA0AIAQgAUEIdGohCSAEIAFBB3QiCmohCwJAAkAgAUUNACABQQh0IQxBACENIAMhDgNAQQAhBiABIQ8DQCAOIAZqIgcgBCAGaiIIKQMANwMAIAdBCGogCEEIaikDADcDACAHQRBqIAhBEGopAwA3AwAgB0EYaiAIQRhqKQMANwMAIAdBIGogCEEgaikDADcDACAHQShqIAhBKGopAwA3AwAgB0EwaiAIQTBqKQMANwMAIAdBOGogCEE4aikDADcDACAHQcAAaiAIQcAAaikDADcDACAHQcgAaiAIQcgAaikDADcDACAHQdAAaiAIQdAAaikDADcDACAHQdgAaiAIQdgAaikDADcDACAHQeAAaiAIQeAAaikDADcDACAHQegAaiAIQegAaikDADcDACAHQfAAaiAIQfAAaikDADcDACAHQfgAaiAIQfgAaikDADcDACAGQYABaiEGIA9Bf2oiDw0ACyAEIAsgCSABEAMgDiEGIAQhDyABIRADQCAGIApqIgcgDyAKaiIIKQMANwMAIAdBCGogCEEIaikDADcDACAHQRBqIAhBEGopAwA3AwAgB0EYaiAIQRhqKQMANwMAIAdBIGogCEEgaikDADcDACAHQShqIAhBKGopAwA3AwAgB0EwaiAIQTBqKQMANwMAIAdBOGogCEE4aikDADcDACAHQcAAaiAIQcAAaikDADcDACAHQcgAaiAIQcgAaikDADcDACAHQdAAaiAIQdAAaikDADcDACAHQdgAaiAIQdgAaikDADcDACAHQeAAaiAIQeAAaikDADcDACAHQegAaiAIQegAaikDADcDACAHQfAAaiAIQfAAaikDADcDACAHQfgAaiAIQfgAaikDADcDACAGQYABaiEGIA9BgAFqIQ8gEEF/aiIQDQALIAsgBCAJIAEQAyAOIAxqIQ4gDUECaiINrSACVA0ADAILCyALQUBqIgcpAzghESAHKQMwIRIgBykDKCETIAcpAyAhFCAHKQMYIRUgBykDECEWIAcpAwghFyAHKQMAIRhBAiEHA0AgB60hGSAHQQJqIQcgGSACVA0ACyAJIBE3AzggCSASNwMwIAkgEzcDKCAJIBQ3AyAgCSAVNwMYIAkgFjcDECAJIBc3AwggCSAYNwMACwJAIAFFDQAgCkFAaiIHIAtqIRogAqdBf2ohDiAHIARqIRsgAUEHdCENQQAhDANAIAMgDSAbKAIAIA5xbGohCkEAIQYgASEPA0AgBCAGaiIHIAcpAwAgCiAGaiIIKQMAhTcDACAHQQhqIhAgECkDACAIQQhqKQMAhTcDACAHQRBqIhAgECkDACAIQRBqKQMAhTcDACAHQRhqIhAgECkDACAIQRhqKQMAhTcDACAHQSBqIhAgECkDACAIQSBqKQMAhTcDACAHQShqIhAgECkDACAIQShqKQMAhTcDACAHQTBqIhAgECkDACAIQTBqKQMAhTcDACAHQThqIhAgECkDACAIQThqKQMAhTcDACAHQcAAaiIQIBApAwAgCEHAAGopAwCFNwMAIAdByABqIhAgECkDACAIQcgAaikDAIU3AwAgB0HQAGoiECAQKQMAIAhB0ABqKQMAhTcDACAHQdgAaiIQIBApAwAgCEHYAGopAwCFNwMAIAdB4ABqIhAgECkDACAIQeAAaikDAIU3AwAgB0HoAGoiECAQKQMAIAhB6ABqKQMAhTcDACAHQfAAaiIQIBApAwAgCEHwAGopAwCFNwMAIAdB+ABqIgcgBykDACAIQfgAaikDAIU3AwAgBkGAAWohBiAPQX9qIg8NAAsgBCALIAkgARADIAMgDSAaKAIAIA5xbGohCkEAIQYgASEPA0AgCyAGaiIHIAcpAwAgCiAGaiIIKQMAhTcDACAHQQhqIhAgECkDACAIQQhqKQMAhTcDACAHQRBqIhAgECkDACAIQRBqKQMAhTcDACAHQRhqIhAgECkDACAIQRhqKQMAhTcDACAHQSBqIhAgECkDACAIQSBqKQMAhTcDACAHQShqIhAgECkDACAIQShqKQMAhTcDACAHQTBqIhAgECkDACAIQTBqKQMAhTcDACAHQThqIhAgECkDACAIQThqKQMAhTcDACAHQcAAaiIQIBApAwAgCEHAAGopAwCFNwMAIAdByABqIhAgECkDACAIQcgAaikDAIU3AwAgB0HQAGoiECAQKQMAIAhB0ABqKQMAhTcDACAHQdgAaiIQIBApAwAgCEHYAGopAwCFNwMAIAdB4ABqIhAgECkDACAIQeAAaikDAIU3AwAgB0HoAGoiECAQKQMAIAhB6ABqKQMAhTcDACAHQfAAaiIQIBApAwAgCEHwAGopAwCFNwMAIAdB+ABqIgcgBykDACAIQfgAaikDAIU3AwAgBkGAAWohBiAPQX9qIg8NAAsgCyAEIAkgARADIAxBAmoiDK0gAlQNAAwCCwsgC0FAaiIHKQM4IREgBykDMCESIAcpAyghEyAHKQMgIRQgBykDGCEVIAcpAxAhFiAHKQMIIRcgBykDACEYQQIhBwNAIAetIRkgB0ECaiEHIBkgAlQNAAsgCSARNwM4IAkgEjcDMCAJIBM3AyggCSAUNwMgIAkgFTcDGCAJIBY3AxAgCSAXNwMIIAkgGDcDAAsCQCABRQ0AQQAhBwNAIAAgBCgCADYCACAAQQRqIQAgBEEEaiEEIAdBAWoiByAFSQ0ACwsL4wUDAX8IfgJ/IAIgA0EHdCAAakFAaiIEKQMAIgU3AwAgAiAEKQMIIgY3AwggAiAEKQMQIgc3AxAgAiAEKQMYIgg3AxggAiAEKQMgIgk3AyAgAiAEKQMoIgo3AyggAiAEKQMwIgs3AzAgAiAEKQM4Igw3AzgCQCADRQ0AIANBAXQhDSAAQfgAaiEEIANBBnQhDkECIQADQCACIAUgBEGIf2opAwCFNwMAIAIgBiAEQZB/aikDAIU3AwggAiAHIARBmH9qKQMAhTcDECACIAggBEGgf2opAwCFNwMYIAIgCSAEQah/aikDAIU3AyAgAiAKIARBsH9qKQMAhTcDKCACIAsgBEG4f2opAwCFNwMwIAIgDCAEQUBqKQMAhTcDOCACEAQgASACKQMANwMAIAFBCGogAikDCDcDACABQRBqIAIpAxA3AwAgAUEYaiACKQMYNwMAIAFBIGogAikDIDcDACABQShqIAIpAyg3AwAgAUEwaiACKQMwNwMAIAFBOGogAikDODcDACACIAIpAwAgBEFIaikDAIU3AwAgAiACKQMIIARBUGopAwCFNwMIIAIgAikDECAEQVhqKQMAhTcDECACIAIpAxggBEFgaikDAIU3AxggAiACKQMgIARBaGopAwCFNwMgIAIgAikDKCAEQXBqKQMAhTcDKCACIAIpAzAgBEF4aikDAIU3AzAgAiACKQM4IAQpAwCFNwM4IAIQBCABIA5qIgMgAikDADcDACADQQhqIAIpAwg3AwAgA0EQaiACKQMQNwMAIANBGGogAikDGDcDACADQSBqIAIpAyA3AwAgA0EoaiACKQMoNwMAIANBMGogAikDMDcDACADQThqIAIpAzg3AwAgACANTw0BIARBgAFqIQQgAUHAAGohASAAQQJqIQAgAikDOCEMIAIpAzAhCyACKQMoIQogAikDICEJIAIpAxghCCACKQMQIQcgAikDCCEGIAIpAwAhBQwACwsLug0IAX4BfwF+AX8BfgF/AX4SfyAAIAAoAgQgACkDKCIBQiCIpyICIAApAzgiA0IgiKciBGpBB3cgACkDCCIFQiCIp3MiBiAEakEJdyAAKQMYIgdCIIincyIIIAZqQQ13IAJzIgkgB6ciCiABpyILakEHdyADp3MiAiALakEJdyAFp3MiDCACakENdyAKcyINIAxqQRJ3IAtzIg4gACkDACIBQiCIpyIPIAApAxAiA0IgiKciEGpBB3cgACkDICIFQiCIp3MiC2pBB3dzIgogCSAIakESdyAEcyIRIAJqQQd3IAApAzAiB6ciCSABpyISakEHdyADp3MiBCASakEJdyAFp3MiEyAEakENdyAJcyIUcyIJIBFqQQl3IAsgEGpBCXcgB0IgiKdzIhVzIhYgCWpBDXcgAnMiFyAWakESdyARcyIRakEHdyAGIBQgE2pBEncgEnMiEmpBB3cgFSALakENdyAPcyIUcyICIBJqQQl3IAxzIg8gAmpBDXcgBnMiGHMiBiARakEJdyAIIA0gFCAVakESdyAQcyIQIARqQQd3cyIMIBBqQQl3cyIIcyIVIAZqQQ13IApzIhQgDCAKIA5qQQl3IBNzIhMgCmpBDXcgC3MiGSATakESdyAOcyIKakEHdyAXcyILIApqQQl3IA9zIg4gC2pBDXcgDHMiFyAOakESdyAKcyINIAIgCCAMakENdyAEcyIMIAhqQRJ3IBBzIghqQQd3IBlzIgpqQQd3cyIEIBQgFWpBEncgEXMiECALakEHdyAJIBggD2pBEncgEnMiEWpBB3cgDHMiDCARakEJdyATcyISIAxqQQ13IAlzIg9zIgkgEGpBCXcgCiAIakEJdyAWcyITcyIWIAlqQQ13IAtzIhQgFmpBEncgEHMiEGpBB3cgBiAPIBJqQRJ3IBFzIhFqQQd3IBMgCmpBDXcgAnMiC3MiAiARakEJdyAOcyIOIAJqQQ13IAZzIhhzIgYgEGpBCXcgFSAXIAsgE2pBEncgCHMiCCAMakEHd3MiCyAIakEJd3MiE3MiFSAGakENdyAEcyIXIAsgBCANakEJdyAScyISIARqQQ13IApzIhkgEmpBEncgDXMiBGpBB3cgFHMiCiAEakEJdyAOcyIPIApqQQ13IAtzIhQgD2pBEncgBHMiDSACIBMgC2pBDXcgDHMiDCATakESdyAIcyIIakEHdyAZcyILakEHd3MiBCAXIBVqQRJ3IBBzIhAgCmpBB3cgCSAYIA5qQRJ3IBFzIg5qQQd3IAxzIgwgDmpBCXcgEnMiESAMakENdyAJcyIXcyIJIBBqQQl3IAsgCGpBCXcgFnMiEnMiEyAJakENdyAKcyIYIBNqQRJ3IBBzIhBqQQd3IAYgFyARakESdyAOcyIKakEHdyASIAtqQQ13IAJzIhdzIgIgCmpBCXcgD3MiDiACakENdyAGcyIWcyIGIAkgFiAOakESdyAKcyIWakEHdyAVIBQgFyASakESdyAIcyIIIAxqQQd3cyIKIAhqQQl3cyISIApqQQ13IAxzIg9zIgwgFmpBCXcgBCANakEJdyARcyIRcyIVIAxqQQ13IAlzIhQgFWpBEncgFnMiCWpBB3cgAiAPIBJqQRJ3IAhzIghqQQd3IBEgBGpBDXcgC3MiD3MiCyAIakEJdyATcyITIAtqQQ13IAJzIhdzIhZqNgIEIAAgACgCCCAWIAlqQQl3IAogDyARakESdyANcyIRakEHdyAYcyICIBFqQQl3IA5zIg5zIg9qNgIIIAAgACgCDCAPIBZqQQ13IAZzIg1qNgIMIAAgACgCECAGIBBqQQl3IBJzIhIgDiACakENdyAKcyIYIBcgE2pBEncgCHMiCiAMakEHd3MiCCAKakEJd3MiFiAIakENdyAMcyIMajYCECAAIAAoAgAgDSAPakESdyAJc2o2AgAgACAAKAIUIAwgFmpBEncgCnNqNgIUIAAgACgCGCAIajYCGCAAIAAoAhwgFmo2AhwgACAAKAIgIBIgBmpBDXcgBHMiCSAYIA5qQRJ3IBFzIgYgC2pBB3dzIgogBmpBCXcgFXMiBGo2AiAgACAAKAIkIAQgCmpBDXcgC3MiC2o2AiQgACAAKAIoIAsgBGpBEncgBnNqNgIoIAAgACgCLCAKajYCLCAAIAAoAjAgCSASakESdyAQcyIGIAJqQQd3IBRzIgtqNgIwIAAgACgCNCALIAZqQQl3IBNzIgpqNgI0IAAgACgCOCAKIAtqQQ13IAJzIgJqNgI4IAAgACgCPCACIApqQRJ3IAZzajYCPAtyAwF/AX4CfwJAIAJFDQBBACgCiAgiAyAAIAGtIgQgAyAAQQd0IgUgAmxqIgMgAyAFIAFsaiIGEAIgAkEBRg0AIAJBf2ohASAFIQIDQEEAKAKICCACaiAAIAQgAyAGEAIgAiAFaiECIAFBf2oiAQ0ACwsL";
var wasmJson$3 = {
	name: name$3,
	data: data$3
};

function scryptInternal(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { costFactor, blockSize, parallelism, hashLength, } = options;
        const SHA256Hasher = createSHA256();
        const blockData = yield pbkdf2({
            password: options.password,
            salt: options.salt,
            iterations: 1,
            hashLength: 128 * blockSize * parallelism,
            hashFunction: SHA256Hasher,
            outputType: 'binary',
        });
        const scryptInterface = yield WASMInterface(wasmJson$3, 0);
        // last block is for storing the temporary vectors
        const VSize = 128 * blockSize * costFactor;
        const XYSize = 256 * blockSize;
        scryptInterface.setMemorySize(blockData.length + VSize + XYSize);
        scryptInterface.writeMemory(blockData, 0);
        // mix blocks
        scryptInterface.getExports().scrypt(blockSize, costFactor, parallelism);
        const expensiveSalt = scryptInterface
            .getMemory()
            .subarray(0, 128 * blockSize * parallelism);
        const outputData = yield pbkdf2({
            password: options.password,
            salt: expensiveSalt,
            iterations: 1,
            hashLength,
            hashFunction: SHA256Hasher,
            outputType: 'binary',
        });
        if (options.outputType === 'hex') {
            const digestChars = new Uint8Array(hashLength * 2);
            return getDigestHex(digestChars, outputData, hashLength);
        }
        // return binary format
        return outputData;
    });
}
// eslint-disable-next-line no-bitwise
const isPowerOfTwo = (v) => v && !(v & (v - 1));
const validateOptions$1 = (options) => {
    if (!options || typeof options !== 'object') {
        throw new Error('Invalid options parameter. It requires an object.');
    }
    if (!Number.isInteger(options.blockSize) || options.blockSize < 1) {
        throw new Error('Block size should be a positive number');
    }
    if (!Number.isInteger(options.costFactor)
        || options.costFactor < 2
        || !isPowerOfTwo(options.costFactor)) {
        throw new Error('Cost factor should be a power of 2, greater than 1');
    }
    if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {
        throw new Error('Parallelism should be a positive number');
    }
    if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {
        throw new Error('Hash length should be a positive number.');
    }
    if (options.outputType === undefined) {
        options.outputType = 'hex';
    }
    if (!['hex', 'binary'].includes(options.outputType)) {
        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);
    }
};
/**
 * Calculates hash using the scrypt password-based key derivation function
 * @returns Computed hash as a hexadecimal string or as
 *          Uint8Array depending on the outputType option
 */
function scrypt(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateOptions$1(options);
        return scryptInternal(options);
    });
}

var name$2 = "bcrypt";
var data$2 = "";
var wasmJson$2 = {
	name: name$2,
	data: data$2
};

function bcryptInternal(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { costFactor, password, salt } = options;
        const bcryptInterface = yield WASMInterface(wasmJson$2, 0);
        bcryptInterface.writeMemory(getUInt8Buffer(salt), 0);
        const passwordBuffer = getUInt8Buffer(password);
        bcryptInterface.writeMemory(passwordBuffer, 16);
        const shouldEncode = options.outputType === 'encoded' ? 1 : 0;
        bcryptInterface.getExports().bcrypt(passwordBuffer.length, costFactor, shouldEncode);
        const memory = bcryptInterface.getMemory();
        if (options.outputType === 'encoded') {
            return intArrayToString(memory, 60);
        }
        if (options.outputType === 'hex') {
            const digestChars = new Uint8Array(24 * 2);
            return getDigestHex(digestChars, memory, 24);
        }
        // return binary format
        // the data is copied to allow GC of the original memory buffer
        return memory.slice(0, 24);
    });
}
const validateOptions = (options) => {
    if (!options || typeof options !== 'object') {
        throw new Error('Invalid options parameter. It requires an object.');
    }
    if (!Number.isInteger(options.costFactor) || options.costFactor < 4 || options.costFactor > 31) {
        throw new Error('Cost factor should be a number between 4 and 31');
    }
    options.password = getUInt8Buffer(options.password);
    if (options.password.length < 1) {
        throw new Error('Password should be at least 1 byte long');
    }
    if (options.password.length > 72) {
        throw new Error('Password should be at most 72 bytes long');
    }
    options.salt = getUInt8Buffer(options.salt);
    if (options.salt.length !== 16) {
        throw new Error('Salt should be 16 bytes long');
    }
    if (options.outputType === undefined) {
        options.outputType = 'encoded';
    }
    if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {
        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);
    }
};
/**
 * Calculates hash using the bcrypt password-hashing function
 * @returns Computed hash
 */
function bcrypt(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateOptions(options);
        return bcryptInternal(options);
    });
}
const validateHashCharacters = (hash) => {
    if (!/^\$2[axyb]\$[0-3][0-9]\$[./A-Za-z0-9]{53}$/.test(hash)) {
        return false;
    }
    if (hash[4] === '0' && parseInt(hash[5], 10) < 4) {
        return false;
    }
    if (hash[4] === '3' && parseInt(hash[5], 10) > 1) {
        return false;
    }
    return true;
};
const validateVerifyOptions = (options) => {
    if (!options || typeof options !== 'object') {
        throw new Error('Invalid options parameter. It requires an object.');
    }
    if (options.hash === undefined || typeof options.hash !== 'string') {
        throw new Error('Hash should be specified');
    }
    if (options.hash.length !== 60) {
        throw new Error('Hash should be 60 bytes long');
    }
    if (!validateHashCharacters(options.hash)) {
        throw new Error('Invalid hash');
    }
    options.password = getUInt8Buffer(options.password);
    if (options.password.length < 1) {
        throw new Error('Password should be at least 1 byte long');
    }
    if (options.password.length > 72) {
        throw new Error('Password should be at most 72 bytes long');
    }
};
/**
 * Verifies password using bcrypt password-hashing function
 * @returns True if the encoded hash matches the password
 */
function bcryptVerify(options) {
    return __awaiter(this, void 0, void 0, function* () {
        validateVerifyOptions(options);
        const { hash, password } = options;
        const bcryptInterface = yield WASMInterface(wasmJson$2, 0);
        bcryptInterface.writeMemory(getUInt8Buffer(hash), 0);
        const passwordBuffer = getUInt8Buffer(password);
        bcryptInterface.writeMemory(passwordBuffer, 60);
        return !!bcryptInterface.getExports().bcrypt_verify(passwordBuffer.length);
    });
}

var name$1 = "whirlpool";
var data$1 = "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";
var wasmJson$1 = {
	name: name$1,
	data: data$1
};

const mutex$1 = new Mutex();
let wasmCache$1 = null;
/**
 * Calculates Whirlpool hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function whirlpool(data) {
    if (wasmCache$1 === null) {
        return lockedCreate(mutex$1, wasmJson$1, 64)
            .then((wasm) => {
            wasmCache$1 = wasm;
            return wasmCache$1.calculate(data);
        });
    }
    try {
        const hash = wasmCache$1.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new Whirlpool hash instance
 */
function createWhirlpool() {
    return WASMInterface(wasmJson$1, 64).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 64,
        };
        return obj;
    });
}

var name = "sm3";
var data = "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";
var wasmJson = {
	name: name,
	data: data
};

const mutex = new Mutex();
let wasmCache = null;
/**
 * Calculates SM3 hash
 * @param data Input data (string, Buffer or TypedArray)
 * @returns Computed hash as a hexadecimal string
 */
function sm3(data) {
    if (wasmCache === null) {
        return lockedCreate(mutex, wasmJson, 32)
            .then((wasm) => {
            wasmCache = wasm;
            return wasmCache.calculate(data);
        });
    }
    try {
        const hash = wasmCache.calculate(data);
        return Promise.resolve(hash);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Creates a new SM3 hash instance
 */
function createSM3() {
    return WASMInterface(wasmJson, 32).then((wasm) => {
        wasm.init();
        const obj = {
            init: () => { wasm.init(); return obj; },
            update: (data) => { wasm.update(data); return obj; },
            digest: (outputType) => wasm.digest(outputType),
            blockSize: 64,
            digestSize: 32,
        };
        return obj;
    });
}

export { argon2Verify, argon2d, argon2i, argon2id, bcrypt, bcryptVerify, blake2b, blake2s, blake3, crc32, createBLAKE2b, createBLAKE2s, createBLAKE3, createCRC32, createHMAC, createKeccak, createMD4, createMD5, createRIPEMD160, createSHA1, createSHA224, createSHA256, createSHA3, createSHA384, createSHA512, createSM3, createWhirlpool, createXXHash32, createXXHash64, keccak, md4, md5, pbkdf2, ripemd160, scrypt, sha1, sha224, sha256, sha3, sha384, sha512, sm3, whirlpool, xxhash32, xxhash64 };
